[{"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\index.js":"1","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\reportWebVitals.js":"2","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\App.js":"3","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\store.js":"4","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\list.js":"5","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\navbar.js":"6","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\awards.js":"7","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\appReducer.js":"8","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\albums.js":"9","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\genres.js":"10","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\homepage.js":"11","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\labels.js":"12","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Author.js":"13","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Album.js":"14","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\albumReducer.js":"15","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\labelsReducer.js":"16","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\awardsReducer.js":"17","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\genresReducer.js":"18","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Awards.js":"19","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Genre.js":"20","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Label.js":"21","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\login.js":"22","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\auth\\protectedroute.js":"23","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\auth\\auth.js":"24","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\User.js":"25","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\mainpage.js":"26","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\users.js":"27","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\playlist.js":"28","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\userReducer.js":"29","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\playlistReducer.js":"30","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Playlist.js":"31","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\songReducer.js":"32","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Song.js":"33","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\myfriend.js":"34","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\song.js":"35"},{"size":669,"mtime":1610837489998,"results":"36","hashOfConfig":"37"},{"size":362,"mtime":499162500000,"results":"38","hashOfConfig":"37"},{"size":1527,"mtime":1611237806050,"results":"39","hashOfConfig":"37"},{"size":725,"mtime":1611184278571,"results":"40","hashOfConfig":"37"},{"size":13777,"mtime":1611233076659,"results":"41","hashOfConfig":"37"},{"size":1732,"mtime":1611238362811,"results":"42","hashOfConfig":"37"},{"size":14038,"mtime":1611233670651,"results":"43","hashOfConfig":"37"},{"size":1661,"mtime":1611077754735,"results":"44","hashOfConfig":"37"},{"size":15714,"mtime":1611233569619,"results":"45","hashOfConfig":"37"},{"size":9818,"mtime":1611235890467,"results":"46","hashOfConfig":"37"},{"size":2451,"mtime":1611238447578,"results":"47","hashOfConfig":"37"},{"size":14820,"mtime":1611237581502,"results":"48","hashOfConfig":"37"},{"size":1272,"mtime":1611235657949,"results":"49","hashOfConfig":"37"},{"size":1531,"mtime":1611246281692,"results":"50","hashOfConfig":"37"},{"size":1623,"mtime":1611086795393,"results":"51","hashOfConfig":"37"},{"size":1614,"mtime":1611237291428,"results":"52","hashOfConfig":"37"},{"size":1550,"mtime":1611183946797,"results":"53","hashOfConfig":"37"},{"size":1614,"mtime":1611235249334,"results":"54","hashOfConfig":"37"},{"size":1525,"mtime":1611235655930,"results":"55","hashOfConfig":"37"},{"size":1527,"mtime":1611235668528,"results":"56","hashOfConfig":"37"},{"size":1530,"mtime":1611237486394,"results":"57","hashOfConfig":"37"},{"size":6092,"mtime":1611245801155,"results":"58","hashOfConfig":"37"},{"size":726,"mtime":1610995326364,"results":"59","hashOfConfig":"37"},{"size":534,"mtime":1611064959069,"results":"60","hashOfConfig":"37"},{"size":2739,"mtime":1611249256810,"results":"61","hashOfConfig":"37"},{"size":562,"mtime":1611072110150,"results":"62","hashOfConfig":"37"},{"size":4564,"mtime":1611323246145,"results":"63","hashOfConfig":"37"},{"size":14416,"mtime":1611323191419,"results":"64","hashOfConfig":"37"},{"size":467,"mtime":1611246285626,"results":"65","hashOfConfig":"37"},{"size":497,"mtime":1611182193486,"results":"66","hashOfConfig":"37"},{"size":2062,"mtime":1611241554454,"results":"67","hashOfConfig":"37"},{"size":1578,"mtime":1611239919630,"results":"68","hashOfConfig":"37"},{"size":1485,"mtime":1611239664766,"results":"69","hashOfConfig":"37"},{"size":3556,"mtime":1611248063858,"results":"70","hashOfConfig":"37"},{"size":12519,"mtime":1611239661629,"results":"71","hashOfConfig":"37"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},"re0ljs",{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"74"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"74"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"74"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"74"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"74"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"74"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"74"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"74"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"74"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"74"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"74"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"74"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"74"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"74"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"141","messages":"142","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"74"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"74"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"74"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"74"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"74"},"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\index.js",[],["161","162"],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\reportWebVitals.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\App.js",["163","164","165","166"],"import logo from './logo.svg';\nimport './App.css';\nimport List from './models/list'; \nimport NavbarComponent from './models/navbar'\nimport Awards from './models/awards'\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport HomePage from './models/homepage'\nimport Login from './models/login'\nimport ProtectedRoute from './auth/protectedroute'\n\n\nexport const App = () => {\n  return (\n    <Router>\n    <div className=\"App\">\n        <Switch>\n          <ProtectedRoute exact path=\"/authors\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/awards\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/labels\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/genres\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/albums\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/home\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/users\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/playlist\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/songs\" component={HomePage}></ProtectedRoute>\n          <ProtectedRoute exact path=\"/myfriends\" component={HomePage}></ProtectedRoute>\n          <Route exact path=\"/\" component={Login}></Route>\n          <Route path=\"*\" component={()=> \"404 Page not found.\"} />\n        </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\store.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\list.js",["167","168"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { GetAuthors } from '../store/Author';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\nimport { NewAuthor } from '../store/Author'\r\nimport { EditAuthor, DeleteAuthor } from '../store/Author'\r\n\r\nexport const EditClientModal = ( {client, c}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-warning shadow-lg p-3 mb-3 rounded\">Edit Author</Button>\r\n        <EClientModal client={client} c={c} handleFormSubmit={EditAuthor} show={show} handleClose={handleClose}></EClientModal>\r\n    </div>\r\n}\r\nexport const DeleteClientModal = ( {client}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"btn btn-danger shadow-lg p-3 mb-3 rounded\">Delete Author</Button>\r\n        <DClientModal client={client} handleFormSubmit={DeleteAuthor} show={show} handleClose={handleClose}></DClientModal>\r\n    </div>\r\n}\r\n\r\n\r\nexport const ExpandableComponent = ({ dispatch, data, allowed }) => \r\n{ \r\n    return(\r\n      \r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n               { allowed ? <EditClientModal client={{ name:data.name, surname: data.surname, nickname: data.nickname, birthdate: data.birthdate, ages: data.ages, citizenship: data.citizenship, networth: data.networth, childrens: data.childrens, bornplace: data.bornplace }} c={data}></EditClientModal> : <div/> }\r\n               { allowed ? <DeleteClientModal client={data}></DeleteClientModal> : <div/> }\r\n\r\n          </div>\r\n          <div className=\"modal-row\">\r\n            <p className=\"font-analysis mt-3\">Albums</p>\r\n          </div>\r\n          <table className=\"table table-striped table-primary table-hover shadow rounded\">\r\n            <tbody>\r\n              <tr>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Name</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Price</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Length</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Studio</td>\r\n              </tr>\r\n              {\r\n                  data.albums.map(client => \r\n                      <tr key={client.id}>\r\n                          <td style={{textAlign: 'center'}}>{client.name}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.price}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.length}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.studio}</td>\r\n                      </tr>    \r\n                  )\r\n              }\r\n            </tbody>\r\n          </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const DClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Are you sure you want to delete this client?</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" type=\"submit\">Yes</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\nexport const EClientModal = ({client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Edit client</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote, c)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Ages</p>\r\n                <InputGroup>\r\n                      <FormControl value={modalNote === null ? '' : modalNote.ages} onChange={event => setModalNote({...modalNote, ages: parseInt(event.target.value)})}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to edit this client?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nfunction closeYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'none';\r\n    button2.style.display = 'none';\r\n    p.style.display='none';\r\n}\r\n\r\nfunction openYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'inline';\r\n    button2.style.display = 'inline';\r\n    p.style.display='inline';\r\n}\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Create Author</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, surname: event.target.value})} placeholder=\"Surname\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, nickname: event.target.value})} placeholder=\"Nickname\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"date\" onChange={event => setModalNote({...modalNote, birthdate: event.target.value})} placeholder=\"Birth date\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"number\" onChange={event => setModalNote({...modalNote, ages: parseInt(event.target.value)})} placeholder=\"Ages\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, citizenship: event.target.value})} placeholder=\"Citizenship\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, networth: event.target.value})} placeholder=\"Networth\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"number\" onChange={event => setModalNote({...modalNote, childrens: parseInt(event.target.value)})} placeholder=\"Childrens\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, bornplace: event.target.value})} placeholder=\"Born place\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>Save</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const List = () =>\r\n{\r\n    const authors = useSelector(state => state.appReducer.authors);\r\n    const dispatch = useDispatch();\r\n    const [allowed, setAllowed] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const columns = [\r\n        {\r\n            name: 'Name',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.name}</div></div>,\r\n          },\r\n          {\r\n            name: 'Surname',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.surname}</div></div>,\r\n          },\r\n          {\r\n            name: 'Nickname',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.nickname}</div></div>,\r\n          },\r\n          {\r\n            name: 'Networth',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.networth}</div></div>,\r\n          },\r\n          {\r\n            name: 'Citizenship',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.citizenship}</div></div>,\r\n          },\r\n          {\r\n            name: 'Ages',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.ages}</div></div>,\r\n          },\r\n          {\r\n            name: 'Place of birth',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.bornplace}</div></div>,\r\n          },\r\n          {\r\n            name: 'Childrens',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: authors => <div data-tag=\"allowRowEvents\"><div>{authors.childrens}</div></div>,\r\n          },\r\n      ];\r\n      \r\n      const data = authors;\r\n      useEffect(() => {\r\n          GetAuthors(dispatch);\r\n          if(localStorage.getItem('username') == 'admin')\r\n          {\r\n            setAllowed(true);\r\n          }\r\n      }, []);\r\n  \r\n      const tableData = {\r\n        columns,\r\n        data,\r\n      };\r\n  \r\n      return (\r\n          <div className=\"centered-an\">\r\n              <p className=\"font-analysis margin-top\">List Of Authors</p>\r\n              { allowed ? <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom\" onClick={handleShow}>Create Author</Button> : <div/> }\r\n              <ClientModal client={null} handleFormSubmit={NewAuthor} show={show} handleClose={handleClose}/>\r\n              <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n                <DataTable\r\n                  selectableRows \r\n                  noHeader \r\n                  selectableRowsHighlight \r\n                  expandableRows \r\n                  expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data} allowed={allowed}></ExpandableComponent>}\r\n                  pagination \r\n                  paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n                </DataTable></DataTableExtensions>\r\n          </div>\r\n      );\r\n}\r\n\r\nexport default List;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\navbar.js",["169","170","171","172","173","174"],"import React, { useEffect } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { Navbar, Nav, Button, Form, FormControl } from 'react-bootstrap';\r\nimport auth from '../auth/auth'\r\n\r\nexport const NavbarComponent = props =>\r\n{\r\n    return ( \r\n      <Navbar fixed=\"top\" bg=\"primary\" variant=\"dark\">\r\n        <Navbar.Brand style={{cursor: 'grab'}} onClick={()=>{ auth.redirect(() => { props.history.push('/home') }) }}>Soundable</Navbar.Brand>\r\n          <Nav className=\"mr-auto\">\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/authors') }) }}>Authors</Nav.Link>\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/albums') }) }}>Albums</Nav.Link>\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/awards') }) }}>Awards</Nav.Link>\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/genres') }) }}>Genres</Nav.Link>\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/labels') }) }}>Labels</Nav.Link>\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/songs') }) }}>Songs</Nav.Link>\r\n            <Nav.Link onClick={()=>{ auth.redirect(() => { props.history.push('/users') }) }}>Users</Nav.Link>\r\n            <Nav.Link style={{position: 'absolute', right: '0', marginRight: '100px' }} onClick={()=>{ auth.redirect(() => { props.history.push('/playlist') }) }}>Playlist</Nav.Link>\r\n            <Nav.Link style={{position: 'absolute', right: '0' }} onClick={()=>{ auth.redirect(() => { props.history.push('/myfriends') }) }}>My Friends</Nav.Link>\r\n          </Nav>\r\n        </Navbar>\r\n    );\r\n}\r\n\r\nexport default NavbarComponent;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\awards.js",["175","176"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { GetAwards, EditAward, NewAward, DeleteAward, Connect } from '../store/Awards'\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\nimport { GetSongs } from '../store/Song'\r\nimport { GetAuthors } from '../store/Author'\r\n\r\nexport const EditClientModal = ( {client, c}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-warning shadow-lg p-3 mb-3 rounded\">Edit Award</Button>\r\n        <EClientModal client={client} c={c} handleFormSubmit={EditAward} show={show} handleClose={handleClose}></EClientModal>\r\n    </div>\r\n}\r\n\r\nexport const ConnectClientModal = ( { albums, client, c }) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-success shadow-lg p-3 mb-3 rounded\">Connect</Button>\r\n        <CClientModal albums={albums} client={client} c={c} handleFormSubmit={Connect} show={show} handleClose={handleClose}></CClientModal>\r\n    </div>\r\n}\r\n\r\nexport const DeleteClientModal = ( {client}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-danger shadow-lg p-3 mb-3 rounded\">Delete Award</Button>\r\n        <DClientModal client={client} handleFormSubmit={DeleteAward} show={show} handleClose={handleClose}></DClientModal>\r\n    </div>\r\n}\r\n\r\n\r\nexport const ExpandableComponent = ({ dispatch, data, authors, songs, allowed }) => \r\n{ \r\n    return(\r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n            { allowed ? <EditClientModal client={{ name: data.name, city: data.city, date: data.date }} c={data}></EditClientModal> : <div/> }\r\n            { allowed ? <DeleteClientModal client={data}></DeleteClientModal> : <div/> }\r\n            { allowed ? <ConnectClientModal albums={data} client={authors} c={songs}></ConnectClientModal> : <div/> }\r\n          </div>\r\n          <div className=\"modal-row\">\r\n            <p className=\"font-analysis mt-3\">Songs</p>\r\n          </div>\r\n          <table className=\"table table-striped table-primary table-hover shadow rounded\">\r\n            <tbody>\r\n              <tr>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Name</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Release Date</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Duration</td>\r\n              </tr>\r\n              {\r\n                  data.songs.map(client => \r\n                      <tr key={client.id}>\r\n                          <td style={{textAlign: 'center'}}>{client.name}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.released}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.duration}</td>\r\n                      </tr>    \r\n                  )\r\n              }\r\n            </tbody>\r\n          </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const DClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Are you sure you want to delete this album?</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" type=\"submit\">Yes</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const EClientModal = ({client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Edit award</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote, c)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">City</p>\r\n                <InputGroup>\r\n                      <FormControl value={modalNote === null ? '' : modalNote.city} onChange={event => setModalNote({...modalNote, city: event.target.value})}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to edit this award?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\nexport const CClientModal = ({ albums, client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(modalNote)\r\n      }, [modalNote]);\r\n\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Connect album</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Albums</p>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder={albums.name}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <p className=\"left-position font-analysis modal-font\">Author</p>\r\n                <Form.Control as=\"select\" onChange={event => setModalNote({...modalNote, nickname: event.target.value})}>\r\n                  {client.map(x=><option key={indexedDB}>{x.nickname}</option>)}\r\n                </Form.Control>\r\n                <br></br>\r\n                <p className=\"left-position font-analysis modal-font\">Genre</p>\r\n                <Form.Control as=\"select\" onChange={event => setModalNote({...modalNote, songname: event.target.value})}>\r\n                  {c.map(x=><option key={indexedDB}>{x.name}</option>)}\r\n                </Form.Control>\r\n                <br></br>\r\n                <div className=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to connect this album?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\nfunction closeYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'none';\r\n    button2.style.display = 'none';\r\n    p.style.display='none';\r\n}\r\n\r\nfunction openYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'inline';\r\n    button2.style.display = 'inline';\r\n    p.style.display='inline';\r\n}\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Create Award</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl  onChange={event => setModalNote({...modalNote, city: event.target.value})} placeholder=\"City\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"date\"  onChange={event => setModalNote({...modalNote, date: event.target.value})} placeholder=\"Date\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>Save</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const Awards = () =>\r\n{\r\n  const awards = useSelector(state => state.awardsReducer.awards);\r\n  const authors = useSelector(state => state.appReducer.authors);\r\n  const songs = useSelector(state => state.songReducer.songs);\r\n\r\n  const dispatch = useDispatch();\r\n  const [allowed, setAllowed] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const columns = [\r\n      {\r\n          name: 'Name',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: awards => <div data-tag=\"allowRowEvents\"><div>{awards.name}</div></div>,\r\n        },\r\n        {\r\n          name: 'City',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: awards => <div data-tag=\"allowRowEvents\"><div>{awards.city}</div></div>,\r\n        },\r\n        {\r\n          name: 'Date',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: awards => <div data-tag=\"allowRowEvents\"><div>{awards.date}</div></div>,\r\n        },\r\n    ];\r\n    \r\n    const data = awards;\r\n\r\n    useEffect(() => {\r\n        GetAwards(dispatch); GetSongs(dispatch); GetAuthors(dispatch);\r\n        if(localStorage.getItem('username') == 'admin')\r\n        {\r\n          setAllowed(true);\r\n        }\r\n    }, []);\r\n\r\n    const tableData = {\r\n      columns,\r\n      data,\r\n    };\r\n\r\n    return (\r\n        <div className=\"centered-an\">\r\n        <p className=\"font-analysis margin-top\">List Of Awards</p>\r\n        { allowed ? <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom\" onClick={handleShow}>Create Award</Button> : <div/> }\r\n        <ClientModal client={null} handleFormSubmit={NewAward} show={show} handleClose={handleClose}/>\r\n        <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n          <DataTable\r\n            selectableRows \r\n            noHeader \r\n            selectableRowsHighlight \r\n            expandableRows \r\n            expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data} authors={authors} songs={songs} allowed={allowed}></ExpandableComponent>}\r\n            pagination \r\n            paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n          </DataTable></DataTableExtensions>\r\n    </div>\r\n    );\r\n}\r\nexport default Awards;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\appReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\albums.js",["177","178"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { GetAlbums } from '../store/Album';\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\nimport { NewAlbum } from '../store/Album'\r\nimport { EditAlbum, DeleteAlbum } from '../store/Album'\r\nimport { GetAuthors } from '../store/Author';\r\nimport { GetGenres } from '../store/Genre';\r\nimport { Connect } from '../store/Album'\r\n\r\nexport const EditClientModal = ( {client, c}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-warning shadow-lg p-3 mb-3 rounded\">Edit Album</Button>\r\n        <EClientModal client={client} c={c} handleFormSubmit={EditAlbum} show={show} handleClose={handleClose}></EClientModal>\r\n    </div>\r\n}\r\n\r\nexport const ConnectClientModal = ( { albums, client, c }) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-success shadow-lg p-3 mb-3 rounded\">Connect</Button>\r\n        <CClientModal albums={albums} client={client} c={c} handleFormSubmit={Connect} show={show} handleClose={handleClose}></CClientModal>\r\n    </div>\r\n}\r\n\r\nexport const DeleteClientModal = ( {client}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-danger shadow-lg p-3 mb-3 rounded\">Delete Album</Button>\r\n        <DClientModal client={client} handleFormSubmit={DeleteAlbum} show={show} handleClose={handleClose}></DClientModal>\r\n    </div>\r\n}\r\n\r\nexport const ExpandableComponent = ({ dispatch, data, authors, genres, allowed }) => \r\n{ \r\n    return(\r\n      \r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n              { allowed ? <EditClientModal client={{ name:data.name, releasedate: data.releasedate, price: data.price, length: data.length, studio: data.studio, picture: data.picture, link: data.link }} c={data}></EditClientModal> : <div/> }\r\n              { allowed ? <DeleteClientModal client={data}></DeleteClientModal> : <div/> }\r\n              { allowed ? <ConnectClientModal albums={data} client={authors} c={genres}></ConnectClientModal> : <div/> }   \r\n          </div>\r\n          <div className=\"modal-row\">\r\n            <p className=\"font-analysis mt-3\">Songs</p>\r\n          </div>\r\n          <table className=\"table table-striped table-primary table-hover shadow rounded\">\r\n            <tbody>\r\n              <tr>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Name</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Release Date</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Duration</td>\r\n              </tr>\r\n              {\r\n                  data.songs.map(client => \r\n                      <tr key={client.id}>\r\n                          <td style={{textAlign: 'center'}}>{client.name}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.released}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.duration}</td>\r\n                      </tr>    \r\n                  )\r\n              }\r\n            </tbody>\r\n          </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const DClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Are you sure you want to delete this album?</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" type=\"submit\">Yes</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const EClientModal = ({client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Edit album</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote, c)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Price</p>\r\n                <InputGroup>\r\n                      <FormControl value={modalNote === null ? '' : modalNote.price} onChange={event => setModalNote({...modalNote, price: parseInt(event.target.value)})}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to edit this album?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\nexport const CClientModal = ({ albums, client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(modalNote)\r\n      }, [modalNote]);\r\n\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Connect album</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Albums</p>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder={albums.name}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <p className=\"left-position font-analysis modal-font\">Author</p>\r\n                <Form.Control as=\"select\" onChange={event => setModalNote({...modalNote, nickname: event.target.value})}>\r\n                  {client.map(x=><option key={indexedDB}>{x.nickname}</option>)}\r\n                </Form.Control>\r\n                <br></br>\r\n                <p className=\"left-position font-analysis modal-font\">Genre</p>\r\n                <Form.Control as=\"select\" onChange={event => setModalNote({...modalNote, genreName: event.target.value})}>\r\n                  {c.map(x=><option key={indexedDB}>{x.name}</option>)}\r\n                </Form.Control>\r\n                <br></br>\r\n                <div className=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to connect this album?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nfunction closeYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'none';\r\n    button2.style.display = 'none';\r\n    p.style.display='none';\r\n}\r\n\r\nfunction openYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'inline';\r\n    button2.style.display = 'inline';\r\n    p.style.display='inline';\r\n}\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Create Album</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"date\"  onChange={event => setModalNote({...modalNote, releasedate: event.target.value})} placeholder=\"Release Date\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, price: parseInt(event.target.value)})} placeholder=\"Price\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, length: event.target.value})} placeholder=\"Length\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, studio: event.target.value})} placeholder=\"Studio\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, picture: event.target.value})} placeholder=\"Picture\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, link: event.target.value})} placeholder=\"Link\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>Save</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const Albums = () =>\r\n{\r\n  const albums = useSelector(state => state.albumsReducer.albums);\r\n  const authors = useSelector(state => state.appReducer.authors);\r\n  const genres = useSelector(state => state.genreReducer.genres);\r\n  const dispatch = useDispatch();\r\n  const [allowed, setAllowed] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const columns = [\r\n      {\r\n          name: 'Name',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: albums => <div data-tag=\"allowRowEvents\"><div>{albums.name}</div></div>,\r\n        },\r\n        {\r\n          name: 'Release Date',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: albums => <div data-tag=\"allowRowEvents\"><div>{albums.releasedate}</div></div>,\r\n        },\r\n        {\r\n          name: 'Price',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: albums => <div data-tag=\"allowRowEvents\"><div>{albums.price}</div></div>,\r\n        },\r\n        {\r\n          name: 'Length',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: albums => <div data-tag=\"allowRowEvents\"><div>{albums.length}</div></div>,\r\n        },\r\n        {\r\n          name: 'Studio',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: albums => <div data-tag=\"allowRowEvents\"><div>{albums.studio}</div></div>,\r\n        }\r\n    ];\r\n    \r\n    const data = albums;\r\n\r\n    useEffect(() => {\r\n        GetAlbums(dispatch); GetAuthors(dispatch); GetGenres(dispatch);\r\n        if(localStorage.getItem('username') == 'admin')\r\n        {\r\n          setAllowed(true);\r\n        }\r\n    }, []);\r\n\r\n    const tableData = {\r\n      columns,\r\n      data,\r\n    };\r\n\r\n    return (\r\n        <div className=\"centered-an\">\r\n        <p className=\"font-analysis margin-top\">List Of Albums</p>\r\n        { allowed ? <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom\" onClick={handleShow}>Create Album</Button> : <div/> }\r\n        <ClientModal client={null} handleFormSubmit={NewAlbum} show={show} handleClose={handleClose}/>\r\n        <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n          <DataTable\r\n            selectableRows \r\n            noHeader \r\n            selectableRowsHighlight \r\n            expandableRows \r\n            expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data} authors={authors} genres={genres} allowed={allowed}></ExpandableComponent>}\r\n            pagination \r\n            paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n          </DataTable></DataTableExtensions>\r\n         </div>\r\n    );\r\n}\r\nexport default Albums;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\genres.js",["179","180"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { GetGenres, NewGenre, DeleteGenre, EditGenre } from '../store/Genre'\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\n\r\nexport const EditClientModal = ( {client, c}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-warning shadow-lg p-3 mb-3 rounded\">Edit Genre</Button>\r\n        <EClientModal client={client} c={c} handleFormSubmit={EditGenre} show={show} handleClose={handleClose}></EClientModal>\r\n    </div>\r\n}\r\n\r\nexport const DeleteClientModal = ( {client}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-danger shadow-lg p-3 mb-3 rounded\">Delete Genre</Button>\r\n        <DClientModal client={client} handleFormSubmit={DeleteGenre} show={show} handleClose={handleClose}></DClientModal>\r\n    </div>\r\n}\r\n\r\n\r\nexport const ExpandableComponent = ({ dispatch, data, allowed}) => \r\n{ \r\n    return(\r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n            { allowed ? <EditClientModal client={{ name: data.name }} c={data}></EditClientModal> : <div/> }\r\n            { allowed ? <DeleteClientModal client={data}></DeleteClientModal> : <div/> }\r\n          </div>\r\n          <div className=\"modal-row\">\r\n            <p className=\"font-analysis mt-3\">Albums</p>\r\n          </div>\r\n          <table className=\"table table-striped table-primary table-hover shadow rounded\">\r\n            <tbody>\r\n              <tr>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Name</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Release Date</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Price</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Length</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Studio</td>\r\n              </tr>\r\n              {\r\n                  data.albums.map(client => \r\n                      <tr key={client.id}>\r\n                          <td style={{textAlign: 'center'}}>{client.name}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.releasedate}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.price}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.length}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.studio}</td>\r\n                      </tr>    \r\n                  )\r\n              }\r\n            </tbody>\r\n          </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const DClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Are you sure you want to delete this genre?</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" type=\"submit\">Yes</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const EClientModal = ({client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Edit award</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote, c)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Name</p>\r\n                <InputGroup>\r\n                      <FormControl value={modalNote === null ? '' : modalNote.name} onChange={event => setModalNote({...modalNote, name: event.target.value})}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to edit this genre?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nfunction closeYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'none';\r\n    button2.style.display = 'none';\r\n    p.style.display='none';\r\n}\r\n\r\nfunction openYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'inline';\r\n    button2.style.display = 'inline';\r\n    p.style.display='inline';\r\n}\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Create Award</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>Save</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const Genres = () =>\r\n{\r\n  const genres = useSelector(state => state.genreReducer.genres);\r\n  const dispatch = useDispatch();\r\n  const [allowed, setAllowed] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const columns = [\r\n      {\r\n          name: 'Name',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: genres => <div data-tag=\"allowRowEvents\"><div>{genres.name}</div></div>,\r\n      }\r\n  ];\r\n    \r\n    const data = genres;\r\n\r\n    useEffect(() => {\r\n        GetGenres(dispatch);\r\n        if(localStorage.getItem('username') == 'admin')\r\n        {\r\n          setAllowed(true);\r\n        }\r\n    }, []);\r\n\r\n    const tableData = {\r\n      columns,\r\n      data,\r\n    };\r\n\r\n    return (\r\n        <div className=\"centered-an\">\r\n        <p className=\"font-analysis margin-top\">List Of Genres</p>\r\n        { allowed ? <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom\" onClick={handleShow}>Create Genre</Button> : <div/> }\r\n        <ClientModal client={null} handleFormSubmit={NewGenre} show={show} handleClose={handleClose}/>\r\n        <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n          <DataTable\r\n            selectableRows \r\n            noHeader \r\n            selectableRowsHighlight \r\n            expandableRows \r\n            expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data} allowed={allowed}></ExpandableComponent>}\r\n            pagination \r\n            paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n          </DataTable></DataTableExtensions>\r\n    </div>\r\n    );\r\n}\r\nexport default Genres;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\homepage.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\labels.js",["181","182"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { GetLabels, EditLabel, NewLabel, DeleteLabel, Connect } from '../store/Label'\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\nimport { GetAuthors } from '../store/Author'\r\n\r\nexport const EditClientModal = ( {client, c}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-warning shadow-lg p-3 mb-3 rounded\">Edit Label</Button>\r\n        <EClientModal client={client} c={c} handleFormSubmit={EditLabel} show={show} handleClose={handleClose}></EClientModal>\r\n    </div>\r\n}\r\n\r\nexport const ConnectClientModal = ( { client, c }) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-success shadow-lg p-3 mb-3 rounded\">Connect</Button>\r\n        <CClientModal client={client} c={c} handleFormSubmit={Connect} show={show} handleClose={handleClose}></CClientModal>\r\n    </div>\r\n}\r\n\r\nexport const DeleteClientModal = ( {client}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-danger shadow-lg p-3 mb-3 rounded\">Delete Label</Button>\r\n        <DClientModal client={client} handleFormSubmit={DeleteLabel} show={show} handleClose={handleClose}></DClientModal>\r\n    </div>\r\n}\r\n\r\nexport const ExpandableComponent = ({ dispatch, data, authors, allowed }) => \r\n{ \r\n    return(\r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n            { allowed ? <EditClientModal client={data} c={data}></EditClientModal> : <div/> }\r\n            { allowed ? <DeleteClientModal client={data}></DeleteClientModal> : <div/> }\r\n            { allowed ? <ConnectClientModal client={authors} c={data}></ConnectClientModal> : <div/> }\r\n          </div>\r\n          <div className=\"modal-row\">\r\n            <p className=\"font-analysis mt-3\">Authors</p>\r\n          </div>\r\n          <table className=\"table table-striped table-primary table-hover shadow rounded\">\r\n            <tbody>\r\n              <tr>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Name</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Surname</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Nickname</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Ages</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Citizenship</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Networth</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Childrens</td>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">Bornplace</td>\r\n              </tr>\r\n              {\r\n                  data.authors.map(client => \r\n                      <tr key={client.id}>\r\n                          <td style={{textAlign: 'center'}}>{client.name}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.surname}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.nickname}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.ages}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.citizenship}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.networth}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.childrens}</td>\r\n                          <td style={{textAlign: 'center'}}>{client.bornplace}</td>\r\n                      </tr>    \r\n                  )\r\n              }\r\n            </tbody>\r\n          </table>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const DClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Are you sure you want to delete this label?</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" type=\"submit\">Yes</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const EClientModal = ({client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Edit label</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote, c)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Name</p>\r\n                <InputGroup>\r\n                      <FormControl value={modalNote === null ? '' : modalNote.name} onChange={event => setModalNote({...modalNote, name: event.target.value})}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to edit this label?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\nexport const CClientModal = ({ client, c ,handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(modalNote)\r\n      }, [modalNote]);\r\n\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Connect Label</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Label</p>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder={c.name}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <p className=\"left-position font-analysis modal-font\">Author</p>\r\n                <Form.Control as=\"select\" onChange={event => setModalNote({...modalNote, nickname: event.target.value})}>\r\n                  {client.map(x=><option key={indexedDB}>{x.nickname}</option>)}\r\n                </Form.Control>\r\n                <br></br>\r\n                <div className=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to connect this label?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\nfunction closeYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'none';\r\n    button2.style.display = 'none';\r\n    p.style.display='none';\r\n}\r\n\r\nfunction openYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'inline';\r\n    button2.style.display = 'inline';\r\n    p.style.display='inline';\r\n}\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Create Label</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"date\" onChange={event => setModalNote({...modalNote, founded: event.target.value})} placeholder=\"Founded\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, founder: event.target.value})} placeholder=\"Founder\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, country: event.target.value})} placeholder=\"Country\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>Save</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\nexport const Labels = () =>\r\n{\r\n  const labels = useSelector(state => state.labelsReducer.labels);\r\n  const authors = useSelector(state => state.appReducer.authors)\r\n  const dispatch = useDispatch();\r\n  const [allowed, setAllowed] = useState(false);\r\n  const [show, setShow] = useState(false);\r\n  const handleClose = () => setShow(false);\r\n  const handleShow = () => setShow(true);\r\n\r\n  const columns = [\r\n      {\r\n          name: 'Name',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: labels => <div data-tag=\"allowRowEvents\"><div>{labels.name}</div></div>,\r\n        },\r\n        {\r\n          name: 'Founder',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: labels => <div data-tag=\"allowRowEvents\"><div>{labels.founder}</div></div>,\r\n        },\r\n        {\r\n          name: 'Founded',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: labels => <div data-tag=\"allowRowEvents\"><div>{labels.founded}</div></div>,\r\n        },\r\n        {\r\n          name: 'Country',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: labels => <div data-tag=\"allowRowEvents\"><div>{labels.country}</div></div>,\r\n        }\r\n    ];\r\n    \r\n    const data = labels;\r\n\r\n    useEffect(() => {\r\n        GetLabels(dispatch); GetAuthors(dispatch);\r\n        if(localStorage.getItem('username') == 'admin')\r\n        {\r\n          setAllowed(true);\r\n        }\r\n    }, []);\r\n\r\n    const tableData = {\r\n      columns,\r\n      data,\r\n    };\r\n\r\n    return (\r\n        <div className=\"centered-an\">\r\n        <p className=\"font-analysis margin-top\">List Of Labels</p>\r\n        { allowed ? <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom\" onClick={handleShow}>Create Label</Button> : <div/> }\r\n        <ClientModal client={null} handleFormSubmit={NewLabel} show={show} handleClose={handleClose}/>\r\n        <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n          <DataTable\r\n            selectableRows \r\n            noHeader \r\n            selectableRowsHighlight \r\n            expandableRows \r\n            expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data} authors={authors} allowed={allowed}></ExpandableComponent>}\r\n            pagination \r\n            paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n          </DataTable></DataTableExtensions>\r\n    </div>\r\n    );\r\n}\r\nexport default Labels;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Author.js",["183","184","185","186"],"import { ActionCreators } from '../redux/appReducer'\r\nimport * as axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/Author'\r\n})\r\n\r\n\r\nexport const GetAuthors = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get();\r\n        dispatch(ActionCreators.setAuthors(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log(\"Error in getting authors...\")\r\n    }\r\n}\r\n\r\n\r\nexport const NewAuthor = async (dispatch,client) => {\r\n    try \r\n    {\r\n        await axiosInstance.post('/Create', client)\r\n        dispatch(ActionCreators.newAuthor(client));\r\n    } catch {\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nexport const DeleteAuthor = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('/Delete/'+`${client.nickname}`);\r\n        dispatch(ActionCreators.deleteAuthor(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting author...')\r\n    }\r\n}\r\n\r\nexport const EditAuthor = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('/Update/'+`${c.nickname}`+'/'+`${client.ages}`);\r\n        dispatch(ActionCreators.editAuthor(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating author...')\r\n    }\r\n}","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Album.js",["187","188","189","190","191","192","193","194","195"],"import { ActionCreators } from '../redux/albumReducer'\r\nimport * as axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/Album'\r\n})\r\n\r\nexport const GetAlbums = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get();\r\n        dispatch(ActionCreators.setAlbums(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting albums...');\r\n    }\r\n}\r\n\r\nexport const NewAlbum = async (dispatch,client) => {\r\n    try \r\n    {\r\n        await axiosInstance.post('/Create', client)\r\n        dispatch(ActionCreators.newAlbum(client));\r\n    } catch {\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nexport const DeleteAlbum = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('/Delete/'+`${client.name}`);\r\n        dispatch(ActionCreators.deleteAlbum(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting album...')\r\n    }\r\n}\r\n\r\nexport const EditAlbum = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('/Update/'+`${c.name}`+'/'+`${client.price}`);\r\n        dispatch(ActionCreators.editAlbum(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating author...')\r\n    }\r\n}\r\n\r\nexport const Connect = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.post('/Connect/'+`${client.name}`+'/'+`${client.nickname}`+'/'+`${client.genreName}`)\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in connecting album...')\r\n    }\r\n}\r\n\r\n","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\albumReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\labelsReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\awardsReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\genresReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Awards.js",["196","197","198","199","200","201","202","203","204"],"import { ActionCreators } from '../redux/awardsReducer'\r\nimport * as axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/Award'\r\n})\r\n\r\nexport const GetAwards = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get();\r\n        dispatch(ActionCreators.setAwards(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting awards...');\r\n    }\r\n}\r\n\r\nexport const NewAward = async (dispatch,client) => {\r\n    try \r\n    {\r\n        await axiosInstance.post('/Create', client)\r\n        dispatch(ActionCreators.newAward(client));\r\n    } catch {\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nexport const DeleteAward = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('/Delete/'+`${client.name}`);\r\n        dispatch(ActionCreators.deleteAward(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting album...')\r\n    }\r\n}\r\n\r\nexport const EditAward = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('/Update/'+`${c.name}`+'/'+`${client.city}`);\r\n        dispatch(ActionCreators.editAward(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating award...')\r\n    }\r\n}\r\n\r\nexport const Connect = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.post('/Connect/'+`${client.name}`+'/'+`${client.nickname}`+'/'+`${client.songname}`)\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in connecting award...')\r\n    }\r\n}","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Genre.js",["205","206","207","208","209","210","211","212","213"],"import { ActionCreators } from '../redux/genresReducer'\r\nimport * as axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/Genre'\r\n})\r\n\r\nexport const GetGenres = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get();\r\n        dispatch(ActionCreators.setGenres(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting genres...');\r\n    }\r\n}\r\n\r\n\r\nexport const NewGenre = async (dispatch,client) => {\r\n    try \r\n    {\r\n        await axiosInstance.post('/Create', client)\r\n        dispatch(ActionCreators.newGenre(client));\r\n    } catch {\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nexport const DeleteGenre = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('/Delete/'+`${client.name}`);\r\n        dispatch(ActionCreators.deleteGenre(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting album...')\r\n    }\r\n}\r\n\r\nexport const EditGenre = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('/Update/'+`${c.name}`+'/'+`${client.name}`);\r\n        dispatch(ActionCreators.editGenre(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating award...')\r\n    }\r\n}\r\n\r\nexport const Connect = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.post('/Connect/'+`${client.name}`+'/'+`${client.nickname}`+'/'+`${client.songname}`)\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in connecting award...')\r\n    }\r\n}","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Label.js",["214","215","216","217","218","219","220"],"import { ActionCreators } from '../redux/labelsReducer'\r\nimport * as axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/Label'\r\n})\r\n\r\nexport const GetLabels = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get();\r\n        dispatch(ActionCreators.setLabels(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting labels...');\r\n    }\r\n}\r\n\r\nexport const NewLabel = async (dispatch,client) => {\r\n    try \r\n    {\r\n        await axiosInstance.post('/Create', client)\r\n        dispatch(ActionCreators.newLabel(client));\r\n    } catch {\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nexport const DeleteLabel = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('/Delete/'+`${client.name}`);\r\n        dispatch(ActionCreators.deleteLabel(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting label...')\r\n    }\r\n}\r\n\r\nexport const EditLabel = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('/Update/'+`${c.name}`+'/'+`${client.name}`);\r\n        dispatch(ActionCreators.editLabel(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating label...')\r\n    }\r\n}\r\n\r\nexport const Connect = async (dispatch, client) => {\r\n    try\r\n    {\r\n        console.log(client);\r\n        await axiosInstance.post('/Connect/'+`${client.name}`+'/'+`${client.nickname}`)\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in connecting label...')\r\n    }\r\n}","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\login.js",["221","222","223"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport * as UserServices from '../store/User'\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\nimport { NewUser } from '../store/User'\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client], console.log(client));\r\n\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Register User</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, surname: event.target.value})} placeholder=\"Surname\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, username: event.target.value})} placeholder=\"Username\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"password\" onChange={event => setModalNote({...modalNote, password: event.target.value})} placeholder=\"Password\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\">Register</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\nexport const ReadMeModal = ({show, handleClose}) => \r\n  {    \r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Use Guide</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <p>Na pocetnoj strani nalazi se login forma, kao i Register dugme. Popunjavanjem login forme, nakon registracije sa validnim\r\n                    korisnickim imenom i lozinkom, prebacuje vas na home page nase aplikacije. </p>\r\n                <p>Ukoliko je kao username unet 'admin' i kao password 'admin' prebacuje vas takodje na home page nase aplikacije, ali sa dodatnim mogucnostima koje ima administrator. </p>\r\n                <p>Mogucnosti koje poseduje admin su dodavanje bilo kog modela, brisanje i editovanje, kao i Connect opciju za pojedine modele (Kompletna mogucnost menjanja podataka iz baze). Svi podaci su prikazani kroz tabele, dok se pregled Edit, Delete i Connect mogucnosti omogucava spustanjem komponente u tabeli za svaki od objekata.</p>\r\n                <p>User ima mogucnost pregleda svih albuma, autora, zanrova itd. kao i dodavanje albuma u svoju playlistu, slusanje istih i brisanje i modifikovanje svoje playliste.</p>\r\n                <p>User ima mogucnost dodavanja korisnika kao svoje prijatelje i pregled svojih prijatelja i njihovih albuma.</p>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n            </Modal.Footer>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\n\r\nexport const Login = props =>\r\n{\r\n    var user = {\r\n        name: null,\r\n        surname: null,\r\n        nickname: null,\r\n        password: null,\r\n        token: null,\r\n        login: false,\r\n    }\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    const [show1, setShow1] = useState(false);\r\n    const handleClose1 = () => setShow1(false);\r\n    const handleShow1 = () => setShow1(true);\r\n\r\n    useEffect(() => {\r\n        localStorage.clear();\r\n    });\r\n\r\n    return (\r\n        <div style={{background:'rgb(176,224,230)'}} className=\"mt-5 mb-5 shadow-lg rounded container\">\r\n        <div style={{background:'rgb(176,224,230)'}} className=\"centered-login shadow login-column width-cont\">\r\n            <p id=\"overlay7\" style={{color: 'black'}} className=\"font-analysis-new\" size=\"lg\">Sign in and start you journey...</p>\r\n            <h1 id=\"overlay1\" className=\"font-analysis\" size=\"lg\">Soundable</h1>\r\n            <div className=\"rounded input-row\">\r\n                <input onChange={(event)=>{user.email= event.target.value}} placeholder=\"Username\" type=\"email\" className=\"zoom font-analysis1 shadow-lg styleinput1\" size=\"lg\"></input>\r\n                <input onChange={(event)=>{user.password = event.target.value}} placeholder=\"Password\" type=\"password\" className=\"zoom font-analysis1 shadow-lg styleinput2\" size=\"lg\"></input>\r\n            </div>\r\n            <div className=\"button-login\">\r\n                <a type=\"submit\" onClick={()=> { UserServices.login(user, props) }} className=\"font-analysis1 zoom shadow-lg css-button-rounded\">Sign In</a>\r\n            </div>\r\n\r\n            <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom mt-5\" onClick={handleShow}>Register</Button>\r\n            <ClientModal client={null} handleFormSubmit={NewUser} show={show} handleClose={handleClose}/>\r\n            <br></br>\r\n            <Button variant=\"primary\" variant=\"lg\" className=\"input-width margin-bottom mt-5\" onClick={handleShow1}>READ ME BEFORE USE</Button>\r\n            <ReadMeModal show={show1} handleClose={handleClose1}/>\r\n        </div>\r\n    </div>\r\n    );\r\n}\r\n\r\nexport default Login;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\auth\\protectedroute.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\auth\\auth.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\User.js",["224","225","226"],"import * as axios from 'axios';\r\nimport auth from '../auth/auth';\r\nimport { ActionCreators } from '../redux/userReducer'\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/'\r\n})\r\n\r\nexport const login = async (user, props) =>\r\n{\r\n    try{\r\n        await axiosInstance.post('User/Login',\r\n        {\r\n            'username': user.email,\r\n            'password': user.password\r\n        },{'Content-Type':'application/json; charset=utf-8', 'Access-Control-Allow-Origin':'*','Access-Control-Allow-Headers':'*'})\r\n        .then((response) => \r\n        {\r\n            if(response.data.length !== 0)\r\n            {\r\n                user.login = true; \r\n                auth.login(() => { props.history.push('/home') })\r\n                localStorage.setItem('username', response.data[0].username);\r\n            }\r\n            else\r\n            {\r\n                var incorrect = document.getElementById('overlay7');\r\n                incorrect.innerHTML = 'Email or password is incorrect...';\r\n                incorrect.style.color='red';\r\n                user.login = false;\r\n                localStorage.clear();\r\n            }\r\n        })\r\n    }\r\n    catch(e)\r\n    {\r\n        console.log(\"Error 404.\")\r\n    }\r\n}\r\n\r\nexport const NewUser = async (dispatch, client) => \r\n{\r\n    try\r\n    {\r\n        await axiosInstance.post('User/Create', client);\r\n        alert('User succesfully registered...');\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in creating a user...')\r\n    }\r\n}\r\n\r\nexport const GetUsers = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get('User');\r\n        dispatch(ActionCreators.setUsers(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting users...');\r\n    }\r\n}\r\n\r\nexport const AddFriend = async (dispatch, client) => \r\n{  \r\n    try\r\n    {\r\n        var loggedin = localStorage.getItem('username');\r\n        await axiosInstance.post('User/Connect/'+`${loggedin}`, client );\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in adding friend...');\r\n    }\r\n}\r\n\r\nexport const GetFriends = async (dispatch) =>\r\n{\r\n    try\r\n    {\r\n        var loggedin = localStorage.getItem('username');\r\n        const {data} = await axiosInstance.get('User/'+`${loggedin}`);\r\n        dispatch(ActionCreators.setUsers(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting friends...');\r\n    }\r\n}\r\n\r\nexport const GetAllUsers = async (dispatch) =>\r\n{\r\n    try\r\n    {\r\n        var loggedin = localStorage.getItem('username');\r\n        const {data} = await axiosInstance.get('User/Get/'+`${loggedin}`);\r\n        dispatch(ActionCreators.setUsers(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting friends...');\r\n    }\r\n}\r\n\r\n","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\mainpage.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\users.js",["227","228","229","230","231","232","233"],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\playlist.js",["234","235","236"],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\userReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\playlistReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Playlist.js",["237","238","239","240","241","242","243","244","245","246","247","248"],"import * as axios from 'axios';\r\nimport { ActionCreators } from '../redux/playlistReducer'\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/'\r\n})\r\n\r\nexport const GetPlaylist = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        var loggedin = localStorage.getItem('username');\r\n        const {data} = await axiosInstance.get('Playlist/'+`${loggedin}`);\r\n        dispatch(ActionCreators.setPlaylists(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting playlists...');\r\n    }\r\n}\r\n\r\nexport const NewPlaylist = async (dispatch, client) => \r\n{\r\n    try\r\n    {\r\n        var loggedin = localStorage.getItem('username');\r\n        await axiosInstance.post('Playlist/Create/'+`${loggedin}`, client);\r\n        alert('Playlist successfuly created...');\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in creating a playlist...')\r\n    }\r\n}\r\n\r\nexport const EditPlaylist = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('Playlist/Update/'+`${c.name}`+'/'+`${client.name}`);\r\n        dispatch(ActionCreators.editLabel(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating label...')\r\n    }\r\n}\r\n\r\nexport const Connect = async (dispatch, client) => {\r\n    try\r\n    {\r\n        console.log(client);\r\n        await axiosInstance.post('Playlist/Connect/'+`${client.nickname}`+'/'+`${client.name}`)\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in connecting label...')\r\n    }\r\n}\r\n\r\n\r\nexport const DeletePlaylist = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('Playlist/Delete/'+`${client.name}`);\r\n        dispatch(ActionCreators.deleteSong(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting song...')\r\n    }\r\n}\r\n\r\nexport const DeletePlaylistAlbum = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('Playlist/DeleteAlbumInPlaylist/'+`${client.name}`+'/'+`${c.name}`);\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting album from playlist...')\r\n    }\r\n}","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\redux\\songReducer.js",[],"C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\store\\Song.js",["249","250","251","252","253","254","255"],"import { ActionCreators } from '../redux/songReducer'\r\nimport * as axios from 'axios';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: 'https://localhost:44374/Song'\r\n})\r\n\r\nexport const GetSongs = async (dispatch) => \r\n{  \r\n    try\r\n    {\r\n        const {data} = await axiosInstance.get();\r\n        dispatch(ActionCreators.setSongs(data));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in geting songs...');\r\n    }\r\n}\r\n\r\nexport const NewSong = async (dispatch,client) => {\r\n    try \r\n    {\r\n        await axiosInstance.post('/Create', client)\r\n        dispatch(ActionCreators.newSong(client));\r\n    } catch {\r\n        console.log('Error!');\r\n    }\r\n}\r\n\r\nexport const DeleteSong = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.delete('/Delete/'+`${client.name}`);\r\n        dispatch(ActionCreators.deleteSong(client));\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in deleting song...')\r\n    }\r\n}\r\n\r\nexport const EditSong = async (dispatch, client, c) => {\r\n    try\r\n    {\r\n        await axiosInstance.put('/Update/'+`${c.name}`+'/'+`${client.name}`);\r\n        dispatch(ActionCreators.editSong(client));\r\n\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in updating song...')\r\n    }\r\n}\r\n\r\nexport const Connect = async (dispatch, client) => {\r\n    try\r\n    {\r\n        await axiosInstance.post('/Connect/'+`${client.name}`+'/'+`${client.nickname}`)\r\n    }\r\n    catch\r\n    {\r\n        console.log('Error in connecting song...')\r\n    }\r\n}","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\myfriend.js",["256","257"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { GetFriends } from '../store/User'\r\n\r\nexport const Extention = ({client}) =>\r\n{\r\n    return(\r\n        <table className=\"table table-striped table-light table-hover shadow rounded\">\r\n        <tbody>\r\n          <tr>\r\n              <td style={{textAlign: 'center'}} className=\"font-analysis1\">ALBUM NAME</td>\r\n          </tr>\r\n          {\r\n              client.albums.map(test => \r\n                  <tr key={test.id}>\r\n                      <td style={{textAlign: 'center'}}>{test.name}</td>\r\n                  </tr>   \r\n                \r\n              )\r\n          }\r\n        </tbody>\r\n      </table>\r\n    );\r\n}\r\n\r\nexport const ExpandableComponent = ({ dispatch, data}) => \r\n{ \r\n    return(\r\n      \r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n            <p className=\"font-analysis mt-3\">PLAYLISTS</p>\r\n          </div>\r\n          <table className=\"table table-striped table-primary table-hover shadow rounded\">\r\n            <tbody>\r\n              <tr>\r\n                  <td style={{textAlign: 'center'}} className=\"font-analysis1\">PLAYLIST NAME</td>\r\n                  <td></td>\r\n              </tr>\r\n              {\r\n                  data.playlists.map(client => \r\n                      <tr key={client.id}>\r\n                          <td style={{textAlign: 'center'}}>{client.name}</td>\r\n                          <td><Extention client={client}></Extention></td>\r\n                      </tr>   \r\n                    \r\n                  )\r\n              }\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const MyFriends = () =>\r\n{\r\n    const friends = useSelector(state => state.userReducer.users);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    const columns = [\r\n      {\r\n          name: 'Name',\r\n          selector: 'Name',\r\n          sortable: true,\r\n          right: true,\r\n          cell: friends => <div data-tag=\"allowRowEvents\"><div>{friends.name}</div></div>,\r\n        },\r\n        {\r\n            name: 'Surname',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: friends => <div data-tag=\"allowRowEvents\"><div>{friends.surname}</div></div>,\r\n        },\r\n        {\r\n            name: 'Username',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: friends => <div data-tag=\"allowRowEvents\"><div>{friends.username}</div></div>,\r\n        }\r\n    ];\r\n    \r\n    const data = friends;\r\n\r\n    useEffect(() => {\r\n        GetFriends(dispatch);\r\n    }, []);\r\n\r\n    const tableData = {\r\n      columns,\r\n      data,\r\n    };\r\n\r\n    return ( \r\n        <div className=\"centered-an\">\r\n        <p className=\"font-analysis margin-top\">My Friends</p>\r\n        <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n          <DataTable\r\n            selectableRows \r\n            noHeader \r\n            selectableRowsHighlight \r\n            expandableRows \r\n            expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data}></ExpandableComponent>}\r\n            pagination \r\n            paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n          </DataTable></DataTableExtensions>\r\n    </div>\r\n    );\r\n}\r\nexport default MyFriends;","C:\\Users\\38165\\Desktop\\Projekti\\soundable-front\\src\\models\\song.js",["258","259"],"import React, { useEffect, useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport DataTable from 'react-data-table-component';\r\nimport DataTableExtensions from 'react-data-table-component-extensions';\r\nimport 'react-data-table-component-extensions/dist/index.css';\r\nimport { Button, FormControl, InputGroup, Modal, Form } from 'react-bootstrap'\r\nimport { GetAlbums } from '../store/Album'\r\nimport { GetSongs, NewSong, EditSong, DeleteSong, Connect } from '../store/Song'\r\n\r\nexport const EditClientModal = ( {client, c}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-warning shadow-lg p-3 mb-3 rounded\">Edit Song</Button>\r\n        <EClientModal client={client} c={c} handleFormSubmit={EditSong} show={show} handleClose={handleClose}></EClientModal>\r\n    </div>\r\n}\r\n\r\nexport const ConnectClientModal = ( { client, c }) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n  \r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-success shadow-lg p-3 mb-3 rounded\">Connect</Button>\r\n        <CClientModal client={client} c={c} handleFormSubmit={Connect} show={show} handleClose={handleClose}></CClientModal>\r\n    </div>\r\n}\r\n\r\nexport const DeleteClientModal = ( {client}) =>\r\n{\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n\r\n    return <div>\r\n        <Button onClick={handleShow} className=\"left-margin-please btn btn-danger shadow-lg p-3 mb-3 rounded\">Delete Song</Button>\r\n        <DClientModal client={client} handleFormSubmit={DeleteSong} show={show} handleClose={handleClose}></DClientModal>\r\n    </div>\r\n}\r\n\r\n\r\nexport const ExpandableComponent = ({ dispatch, data, albums, allowed }) => \r\n{ \r\n    return(\r\n      <div className=\"mb-3\">\r\n          <div className=\"modal-row\">\r\n            { allowed ? <EditClientModal client={data} c={data}></EditClientModal> : <div/> }\r\n            { allowed ? <DeleteClientModal client={data}></DeleteClientModal> : <div/> }\r\n            { allowed ? <ConnectClientModal client={albums} c={data}></ConnectClientModal> : <div/> }\r\n          </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport const DClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Are you sure you want to delete this song?</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" type=\"submit\">Yes</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>Close</Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const EClientModal = ({client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Edit song</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote, c)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Name</p>\r\n                <InputGroup>\r\n                      <FormControl value={modalNote === null ? '' : modalNote.name} onChange={event => setModalNote({...modalNote, name: event.target.value})}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <div class=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to edit this song?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\n\r\nexport const CClientModal = ({ client, c, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(modalNote)\r\n      }, [modalNote]);\r\n\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Connect song</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote)\r\n            }}>\r\n            <Modal.Body>\r\n                <p className=\"left-position font-analysis modal-font\">Song</p>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder={c.name}></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <p className=\"left-position font-analysis modal-font\">Albums</p>\r\n                <Form.Control as=\"select\" onChange={event => setModalNote({...modalNote, nickname: event.target.value})}>\r\n                  {client.map(x=><option key={indexedDB}>{x.name}</option>)}\r\n                </Form.Control>\r\n                <br></br>\r\n                <div className=\"center-buttons\">\r\n                    <Button variant=\"primary\" onClick={()=>openYesNo()}>Save</Button>\r\n                    <Button className=\"margin-left\" variant=\"secondary\" onClick={handleClose}>\r\n                        Close\r\n                    </Button>\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer className=\"center-buttons1\">\r\n                <div>\r\n                    <p id=\"hidden-p\" className=\"font-analysis-new\">Are you sure you want to connect this song?</p>\r\n                    <div className=\"center-buttons\">\r\n                        <Button id=\"hidden-type\" type=\"submit\" variant=\"primary\" onClick={handleClose}>Yes</Button>\r\n                        <Button id=\"hidden-type1\" className=\"margin-left\" variant=\"secondary\" onClick={()=>closeYesNo()}>Cancel</Button>\r\n                    </div>\r\n                </div>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\nfunction closeYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'none';\r\n    button2.style.display = 'none';\r\n    p.style.display='none';\r\n}\r\n\r\nfunction openYesNo()\r\n{\r\n    var p = document.getElementById('hidden-p');\r\n    var button1 = document.getElementById('hidden-type');\r\n    var button2 = document.getElementById('hidden-type1');\r\n    button1.style.display = 'inline';\r\n    button2.style.display = 'inline';\r\n    p.style.display='inline';\r\n}\r\n\r\nexport const ClientModal = ({client, handleFormSubmit, show, handleClose}) => \r\n  {    \r\n      const [ modalNote, setModalNote ] = useState({});\r\n      const dispatch = useDispatch();\r\n\r\n      useEffect(() => {\r\n          setModalNote(client)\r\n      }, [client]);\r\n      return (\r\n          <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n              <Modal.Title>Create Song</Modal.Title>\r\n            </Modal.Header>\r\n            <Form onSubmit={event => {\r\n                event.preventDefault();\r\n                handleFormSubmit(dispatch, modalNote);\r\n            }}>\r\n            <Modal.Body>\r\n                <InputGroup>\r\n                      <FormControl onChange={event => setModalNote({...modalNote, name: event.target.value})} placeholder=\"Name\"></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl  onChange={event => setModalNote({...modalNote, duration: event.target.value})} placeholder=\"Duration\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n                <InputGroup>\r\n                      <FormControl type=\"date\" onChange={event => setModalNote({...modalNote, released: event.target.value})} placeholder=\"Released\" ></FormControl>\r\n                </InputGroup>\r\n                <br></br>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n              <Button variant=\"secondary\" onClick={handleClose}>\r\n                Close\r\n              </Button>\r\n              <Button type=\"submit\" variant=\"primary\" onClick={handleClose}>Save</Button>\r\n            </Modal.Footer>\r\n            </Form>\r\n          </Modal>\r\n      );\r\n}\r\n\r\nexport const Song = () =>\r\n{\r\n    const songs = useSelector(state => state.songReducer.songs);\r\n    const albums = useSelector(state => state.albumsReducer.albums);\r\n  \r\n    const dispatch = useDispatch();\r\n    const [allowed, setAllowed] = useState(false);\r\n    const [show, setShow] = useState(false);\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n  \r\n    const columns = [\r\n        {\r\n            name: 'Name',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: songs => <div data-tag=\"allowRowEvents\"><div>{songs.name}</div></div>,\r\n          },\r\n          {\r\n            name: 'Duration',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: songs => <div data-tag=\"allowRowEvents\"><div>{songs.duration}</div></div>,\r\n          },\r\n          {\r\n            name: 'Released',\r\n            selector: 'Name',\r\n            sortable: true,\r\n            right: true,\r\n            cell: songs => <div data-tag=\"allowRowEvents\"><div>{songs.released}</div></div>,\r\n          },\r\n      ];\r\n      \r\n      const data = songs;\r\n  \r\n      useEffect(() => {\r\n          GetSongs(dispatch); GetAlbums(dispatch);\r\n          if(localStorage.getItem('username') == 'admin')\r\n          {\r\n            setAllowed(true);\r\n          }\r\n      }, []);\r\n  \r\n      const tableData = {\r\n        columns,\r\n        data,\r\n      };\r\n\r\n    return(\r\n        <div className=\"centered-an\">\r\n        <p className=\"font-analysis margin-top\">List Of Songs</p>\r\n        { allowed ? <Button type=\"submit\" variant=\"primary\" className=\"input-width margin-bottom\" onClick={handleShow}>Create Song</Button> : <div/> }\r\n        <ClientModal client={null} handleFormSubmit={NewSong} show={show} handleClose={handleClose}/>\r\n        <DataTableExtensions print={true} export={true} exportHeaders={false} {...tableData}>\r\n          <DataTable\r\n            selectableRows \r\n            noHeader \r\n            selectableRowsHighlight \r\n            expandableRows \r\n            expandableRowsComponent={<ExpandableComponent dispatch={dispatch} data={data} albums={albums} allowed={allowed}></ExpandableComponent>}\r\n            pagination \r\n            paginationRowsPerPageOptions={[5,10,15,20,25,50,100]}>\r\n          </DataTable></DataTableExtensions>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Song;",{"ruleId":"260","replacedBy":"261"},{"ruleId":"262","replacedBy":"263"},{"ruleId":"264","severity":1,"message":"265","line":1,"column":8,"nodeType":"266","messageId":"267","endLine":1,"endColumn":12},{"ruleId":"264","severity":1,"message":"268","line":3,"column":8,"nodeType":"266","messageId":"267","endLine":3,"endColumn":12},{"ruleId":"264","severity":1,"message":"269","line":4,"column":8,"nodeType":"266","messageId":"267","endLine":4,"endColumn":23},{"ruleId":"264","severity":1,"message":"270","line":5,"column":8,"nodeType":"266","messageId":"267","endLine":5,"endColumn":14},{"ruleId":"271","severity":1,"message":"272","line":303,"column":47,"nodeType":"273","messageId":"274","endLine":303,"endColumn":49},{"ruleId":"275","severity":1,"message":"276","line":307,"column":10,"nodeType":"277","endLine":307,"endColumn":12,"suggestions":"278"},{"ruleId":"264","severity":1,"message":"279","line":1,"column":17,"nodeType":"266","messageId":"267","endLine":1,"endColumn":26},{"ruleId":"264","severity":1,"message":"280","line":2,"column":10,"nodeType":"266","messageId":"267","endLine":2,"endColumn":21},{"ruleId":"264","severity":1,"message":"281","line":2,"column":23,"nodeType":"266","messageId":"267","endLine":2,"endColumn":34},{"ruleId":"264","severity":1,"message":"282","line":3,"column":23,"nodeType":"266","messageId":"267","endLine":3,"endColumn":29},{"ruleId":"264","severity":1,"message":"283","line":3,"column":31,"nodeType":"266","messageId":"267","endLine":3,"endColumn":35},{"ruleId":"264","severity":1,"message":"284","line":3,"column":37,"nodeType":"266","messageId":"267","endLine":3,"endColumn":48},{"ruleId":"271","severity":1,"message":"272","line":315,"column":45,"nodeType":"273","messageId":"274","endLine":315,"endColumn":47},{"ruleId":"275","severity":1,"message":"276","line":319,"column":8,"nodeType":"277","endLine":319,"endColumn":10,"suggestions":"285"},{"ruleId":"271","severity":1,"message":"272","line":348,"column":45,"nodeType":"273","messageId":"274","endLine":348,"endColumn":47},{"ruleId":"275","severity":1,"message":"276","line":352,"column":8,"nodeType":"277","endLine":352,"endColumn":10,"suggestions":"286"},{"ruleId":"271","severity":1,"message":"272","line":223,"column":45,"nodeType":"273","messageId":"274","endLine":223,"endColumn":47},{"ruleId":"275","severity":1,"message":"276","line":227,"column":8,"nodeType":"277","endLine":227,"endColumn":10,"suggestions":"287"},{"ruleId":"271","severity":1,"message":"272","line":328,"column":45,"nodeType":"273","messageId":"274","endLine":328,"endColumn":47},{"ruleId":"275","severity":1,"message":"276","line":332,"column":8,"nodeType":"277","endLine":332,"endColumn":10,"suggestions":"288"},{"ruleId":"289","severity":1,"message":"290","line":36,"column":46,"nodeType":"273","messageId":"291","endLine":36,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":48,"column":43,"nodeType":"273","messageId":"291","endLine":48,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":48,"column":59,"nodeType":"273","messageId":"291","endLine":48,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":48,"column":63,"nodeType":"273","messageId":"291","endLine":48,"endColumn":64},{"ruleId":"289","severity":1,"message":"290","line":34,"column":46,"nodeType":"273","messageId":"291","endLine":34,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":46,"column":43,"nodeType":"273","messageId":"291","endLine":46,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":46,"column":55,"nodeType":"273","messageId":"291","endLine":46,"endColumn":56},{"ruleId":"289","severity":1,"message":"290","line":46,"column":59,"nodeType":"273","messageId":"291","endLine":46,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":59,"column":45,"nodeType":"273","messageId":"291","endLine":59,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":59,"column":62,"nodeType":"273","messageId":"291","endLine":59,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":59,"column":66,"nodeType":"273","messageId":"291","endLine":59,"endColumn":67},{"ruleId":"289","severity":1,"message":"290","line":59,"column":87,"nodeType":"273","messageId":"291","endLine":59,"endColumn":88},{"ruleId":"289","severity":1,"message":"290","line":59,"column":91,"nodeType":"273","messageId":"291","endLine":59,"endColumn":92},{"ruleId":"289","severity":1,"message":"290","line":34,"column":46,"nodeType":"273","messageId":"291","endLine":34,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":46,"column":43,"nodeType":"273","messageId":"291","endLine":46,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":46,"column":55,"nodeType":"273","messageId":"291","endLine":46,"endColumn":56},{"ruleId":"289","severity":1,"message":"290","line":46,"column":59,"nodeType":"273","messageId":"291","endLine":46,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":59,"column":45,"nodeType":"273","messageId":"291","endLine":59,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":59,"column":62,"nodeType":"273","messageId":"291","endLine":59,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":59,"column":66,"nodeType":"273","messageId":"291","endLine":59,"endColumn":67},{"ruleId":"289","severity":1,"message":"290","line":59,"column":87,"nodeType":"273","messageId":"291","endLine":59,"endColumn":88},{"ruleId":"289","severity":1,"message":"290","line":59,"column":91,"nodeType":"273","messageId":"291","endLine":59,"endColumn":92},{"ruleId":"289","severity":1,"message":"290","line":35,"column":46,"nodeType":"273","messageId":"291","endLine":35,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":47,"column":43,"nodeType":"273","messageId":"291","endLine":47,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":47,"column":55,"nodeType":"273","messageId":"291","endLine":47,"endColumn":56},{"ruleId":"289","severity":1,"message":"290","line":47,"column":59,"nodeType":"273","messageId":"291","endLine":47,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":60,"column":45,"nodeType":"273","messageId":"291","endLine":60,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":60,"column":62,"nodeType":"273","messageId":"291","endLine":60,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":60,"column":66,"nodeType":"273","messageId":"291","endLine":60,"endColumn":67},{"ruleId":"289","severity":1,"message":"290","line":60,"column":87,"nodeType":"273","messageId":"291","endLine":60,"endColumn":88},{"ruleId":"289","severity":1,"message":"290","line":60,"column":91,"nodeType":"273","messageId":"291","endLine":60,"endColumn":92},{"ruleId":"289","severity":1,"message":"290","line":34,"column":46,"nodeType":"273","messageId":"291","endLine":34,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":46,"column":43,"nodeType":"273","messageId":"291","endLine":46,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":46,"column":55,"nodeType":"273","messageId":"291","endLine":46,"endColumn":56},{"ruleId":"289","severity":1,"message":"290","line":46,"column":59,"nodeType":"273","messageId":"291","endLine":46,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":60,"column":45,"nodeType":"273","messageId":"291","endLine":60,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":60,"column":62,"nodeType":"273","messageId":"291","endLine":60,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":60,"column":66,"nodeType":"273","messageId":"291","endLine":60,"endColumn":67},{"ruleId":"264","severity":1,"message":"280","line":2,"column":10,"nodeType":"266","messageId":"267","endLine":2,"endColumn":21},{"ruleId":"292","severity":1,"message":"293","line":115,"column":17,"nodeType":"294","endLine":115,"endColumn":146},{"ruleId":"295","severity":1,"message":"296","line":121,"column":39,"nodeType":"297","endLine":121,"endColumn":51},{"ruleId":"289","severity":1,"message":"290","line":73,"column":49,"nodeType":"273","messageId":"291","endLine":73,"endColumn":50},{"ruleId":"289","severity":1,"message":"290","line":86,"column":55,"nodeType":"273","messageId":"291","endLine":86,"endColumn":56},{"ruleId":"289","severity":1,"message":"290","line":100,"column":59,"nodeType":"273","messageId":"291","endLine":100,"endColumn":60},{"ruleId":"264","severity":1,"message":"298","line":6,"column":10,"nodeType":"266","messageId":"267","endLine":6,"endColumn":18},{"ruleId":"264","severity":1,"message":"299","line":6,"column":33,"nodeType":"266","messageId":"267","endLine":6,"endColumn":43},{"ruleId":"264","severity":1,"message":"284","line":7,"column":18,"nodeType":"266","messageId":"267","endLine":7,"endColumn":29},{"ruleId":"264","severity":1,"message":"300","line":7,"column":31,"nodeType":"266","messageId":"267","endLine":7,"endColumn":41},{"ruleId":"264","severity":1,"message":"301","line":53,"column":10,"nodeType":"266","messageId":"267","endLine":53,"endColumn":20},{"ruleId":"264","severity":1,"message":"302","line":63,"column":10,"nodeType":"266","messageId":"267","endLine":63,"endColumn":19},{"ruleId":"275","severity":1,"message":"276","line":118,"column":8,"nodeType":"277","endLine":118,"endColumn":10,"suggestions":"303"},{"ruleId":"304","severity":1,"message":"305","line":85,"column":61,"nodeType":"294","endLine":85,"endColumn":87},{"ruleId":"271","severity":1,"message":"272","line":332,"column":45,"nodeType":"273","messageId":"274","endLine":332,"endColumn":47},{"ruleId":"275","severity":1,"message":"276","line":336,"column":8,"nodeType":"277","endLine":336,"endColumn":10,"suggestions":"306"},{"ruleId":"289","severity":1,"message":"290","line":13,"column":59,"nodeType":"273","messageId":"291","endLine":13,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":27,"column":52,"nodeType":"273","messageId":"291","endLine":27,"endColumn":53},{"ruleId":"289","severity":1,"message":"290","line":40,"column":51,"nodeType":"273","messageId":"291","endLine":40,"endColumn":52},{"ruleId":"289","severity":1,"message":"290","line":40,"column":63,"nodeType":"273","messageId":"291","endLine":40,"endColumn":64},{"ruleId":"289","severity":1,"message":"290","line":40,"column":67,"nodeType":"273","messageId":"291","endLine":40,"endColumn":68},{"ruleId":"289","severity":1,"message":"290","line":54,"column":53,"nodeType":"273","messageId":"291","endLine":54,"endColumn":54},{"ruleId":"289","severity":1,"message":"290","line":54,"column":74,"nodeType":"273","messageId":"291","endLine":54,"endColumn":75},{"ruleId":"289","severity":1,"message":"290","line":54,"column":78,"nodeType":"273","messageId":"291","endLine":54,"endColumn":79},{"ruleId":"289","severity":1,"message":"290","line":66,"column":54,"nodeType":"273","messageId":"291","endLine":66,"endColumn":55},{"ruleId":"289","severity":1,"message":"290","line":78,"column":69,"nodeType":"273","messageId":"291","endLine":78,"endColumn":70},{"ruleId":"289","severity":1,"message":"290","line":78,"column":86,"nodeType":"273","messageId":"291","endLine":78,"endColumn":87},{"ruleId":"289","severity":1,"message":"290","line":78,"column":90,"nodeType":"273","messageId":"291","endLine":78,"endColumn":91},{"ruleId":"289","severity":1,"message":"290","line":34,"column":46,"nodeType":"273","messageId":"291","endLine":34,"endColumn":47},{"ruleId":"289","severity":1,"message":"290","line":46,"column":43,"nodeType":"273","messageId":"291","endLine":46,"endColumn":44},{"ruleId":"289","severity":1,"message":"290","line":46,"column":55,"nodeType":"273","messageId":"291","endLine":46,"endColumn":56},{"ruleId":"289","severity":1,"message":"290","line":46,"column":59,"nodeType":"273","messageId":"291","endLine":46,"endColumn":60},{"ruleId":"289","severity":1,"message":"290","line":59,"column":45,"nodeType":"273","messageId":"291","endLine":59,"endColumn":46},{"ruleId":"289","severity":1,"message":"290","line":59,"column":62,"nodeType":"273","messageId":"291","endLine":59,"endColumn":63},{"ruleId":"289","severity":1,"message":"290","line":59,"column":66,"nodeType":"273","messageId":"291","endLine":59,"endColumn":67},{"ruleId":"264","severity":1,"message":"307","line":1,"column":28,"nodeType":"266","messageId":"267","endLine":1,"endColumn":36},{"ruleId":"275","severity":1,"message":"276","line":92,"column":8,"nodeType":"277","endLine":92,"endColumn":10,"suggestions":"308"},{"ruleId":"271","severity":1,"message":"272","line":287,"column":47,"nodeType":"273","messageId":"274","endLine":287,"endColumn":49},{"ruleId":"275","severity":1,"message":"276","line":291,"column":10,"nodeType":"277","endLine":291,"endColumn":12,"suggestions":"309"},"no-native-reassign",["310"],"no-negated-in-lhs",["311"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'List' is defined but never used.","'NavbarComponent' is defined but never used.","'Awards' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["312"],"'useEffect' is defined but never used.","'useSelector' is defined but never used.","'useDispatch' is defined but never used.","'Button' is defined but never used.","'Form' is defined but never used.","'FormControl' is defined but never used.",["313"],["314"],["315"],["316"],"no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'GetUsers' is defined but never used.","'GetFriends' is defined but never used.","'InputGroup' is defined but never used.","'closeYesNo' is defined but never used.","'openYesNo' is defined but never used.",["317"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.",["318"],"'useState' is defined but never used.",["319"],["320"],"no-global-assign","no-unsafe-negation",{"desc":"321","fix":"322"},{"desc":"321","fix":"323"},{"desc":"321","fix":"324"},{"desc":"321","fix":"325"},{"desc":"321","fix":"326"},{"desc":"321","fix":"327"},{"desc":"321","fix":"328"},{"desc":"321","fix":"329"},{"desc":"321","fix":"330"},"Update the dependencies array to be: [dispatch]",{"range":"331","text":"332"},{"range":"333","text":"332"},{"range":"334","text":"332"},{"range":"335","text":"332"},{"range":"336","text":"332"},{"range":"337","text":"332"},{"range":"338","text":"332"},{"range":"339","text":"332"},{"range":"340","text":"332"},[12669,12671],"[dispatch]",[13003,13005],[14672,14674],[8815,8817],[13799,13801],[3837,3839],[13412,13414],[2828,2830],[11490,11492]]